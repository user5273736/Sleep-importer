Ottimo progresso! Ora Gradle funziona, ma manca il plugin Android. Il problema è nel `build.gradle` root.

## 🔧 SOLUZIONE: Correggi build.gradle (root)

Vai sul tuo repository GitHub e **modifica** il file `build.gradle` (quello nella root, NON quello in `app/`):

**Sostituisci tutto il contenuto con questo**:

```gradle
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20'
    }
}

plugins {
    id 'com.android.application' version '8.2.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.20' apply false
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
```

-----

## 📝 Ora aggiungiamo i file Kotlin mancanti!

### File: `app/src/main/java/com/example/sleepimporter/MainActivity.kt`

**Nome file**: `app/src/main/java/com/example/sleepimporter/MainActivity.kt`

**Contenuto**:

```kotlin
package com.example.sleepimporter

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.health.connect.client.HealthConnectClient
import androidx.health.connect.client.PermissionController
import androidx.health.connect.client.records.SleepSessionRecord
import androidx.health.connect.client.records.SleepStageRecord
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private lateinit var healthConnectClient: HealthConnectClient
    private lateinit var statusText: TextView
    private lateinit var selectButton: Button
    private lateinit var importButton: Button
    private var selectedFileUri: Uri? = null

    private val permissions = setOf(
        SleepSessionRecord.WRITE_PERMISSION,
        SleepStageRecord.WRITE_PERMISSION,
        SleepSessionRecord.READ_PERMISSION,
        SleepStageRecord.READ_PERMISSION
    )

    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let {
            selectedFileUri = it
            statusText.text = "File selezionato: ${it.lastPathSegment}"
            importButton.isEnabled = true
        }
    }

    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        checkPermissionsAndEnableImport()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        statusText = findViewById(R.id.statusText)
        selectButton = findViewById(R.id.selectButton)
        importButton = findViewById(R.id.importButton)

        if (!HealthConnectClient.isAvailable(this)) {
            statusText.text = "Health Connect non disponibile su questo dispositivo"
            selectButton.isEnabled = false
            return
        }

        healthConnectClient = HealthConnectClient.getOrCreate(this)

        selectButton.setOnClickListener {
            filePickerLauncher.launch("application/json")
        }

        importButton.setOnClickListener {
            requestHealthPermissions()
        }

        checkPermissionsAndEnableImport()
    }

    private fun checkPermissionsAndEnableImport() {
        lifecycleScope.launch {
            try {
                val granted = healthConnectClient.permissionController.getGrantedPermissions()
                val hasAllPermissions = granted.containsAll(permissions)
                
                if (hasAllPermissions && selectedFileUri != null) {
                    importButton.isEnabled = true
                    statusText.text = "Pronto per l'importazione"
                }
            } catch (e: Exception) {
                statusText.text = "Errore verifica permessi: ${e.message}"
            }
        }
    }

    private fun requestHealthPermissions() {
        lifecycleScope.launch {
            try {
                val granted = healthConnectClient.permissionController.getGrantedPermissions()
                if (!granted.containsAll(permissions)) {
                    val intent = PermissionController.createRequestPermissionResultContract()
                        .createIntent(this@MainActivity, permissions)
                    requestPermissionLauncher.launch(intent)
                } else {
                    importSleepData()
                }
            } catch (e: Exception) {
                statusText.text = "Errore richiesta permessi: ${e.message}"
                Toast.makeText(this@MainActivity, "Errore: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun importSleepData() {
        selectedFileUri?.let { uri ->
            lifecycleScope.launch {
                try {
                    statusText.text = "Importazione in corso..."
                    importButton.isEnabled = false
                    
                    val importer = SleepImporter(healthConnectClient, this@MainActivity)
                    val result = importer.importFromJsonUri(uri)
                    
                    statusText.text = "✓ Importati: ${result.successCount} record\n✗ Duplicati: ${result.skippedCount}"
                    Toast.makeText(
                        this@MainActivity, 
                        "Importazione completata!\n${result.successCount} record aggiunti", 
                        Toast.LENGTH_LONG
                    ).show()
                    
                    importButton.isEnabled = true
                } catch (e: Exception) {
                    e.printStackTrace()
                    statusText.text = "Errore durante l'importazione"
                    Toast.makeText(this@MainActivity, "Errore: ${e.message}", Toast.LENGTH_LONG).show()
                    importButton.isEnabled = true
                }
            }
        }
    }
}
```

-----

### File: `app/src/main/java/com/example/sleepimporter/SleepImporter.kt`

**Nome file**: `app/src/main/java/com/example/sleepimporter/SleepImporter.kt`

**Contenuto**:

```kotlin
package com.example.sleepimporter

import android.content.Context
import android.net.Uri
import androidx.health.connect.client.HealthConnectClient
import androidx.health.connect.client.records.SleepStageRecord
import androidx.health.connect.client.request.ReadRecordsRequest
import androidx.health.connect.client.time.TimeRangeFilter
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONArray
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class SleepImporter(
    private val client: HealthConnectClient,
    private val context: Context
)
```
